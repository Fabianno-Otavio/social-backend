// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String
  followedBy String[]
  following  String[]
  password   String
  socialName String
  username   String

  commentLikes CommentLike[]
  comments     Comment[]
  postLikes    PostLike[]
  posts        Post[]
}

model Post {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content   String
  likeCount Int    @default(0)
  title     String

  commentLikes CommentLike[]
  comments     Comment[]
  postLikes    PostLike[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String
}

model PostLike {
  id String @id @default(uuid())

  post   Post   @relation(fields: [postId], references: [id])
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Comment {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content   String
  likeCount Int    @default(0)

  CommentLike CommentLike[]
  post        Post          @relation(fields: [postId], references: [id])
  postId      String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
}

model CommentLike {
  id String @id @default(uuid())

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
  post      Post    @relation(fields: [postId], references: [id])
  postId    String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}
